// @title go-learn API
// @version 1.0
// @description This is a sample go-learn server.
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @BasePath /api/v1
package main

import (
	"log"
	"net/http"

	_ "go-project/docs" // docs is generated by Swag CLI, you have to import it.

	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware

	"go-project/configs"
	"go-project/controllers"
	"go-project/middlewares"
	"go-project/utils"

	"github.com/gin-gonic/gin"
)

func main() {
	gin.SetMode(gin.DebugMode)
	r := gin.Default()
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	r.StaticFile("/favicon.ico", "./static/favicon.ico")
	r.StaticFile("/swagger-json", "./docs/swagger.json")
	r.Static("/static", "./static")
	r.Use(middlewares.ErrorHandler(), middlewares.ValidatorMiddleware())

	// 初始化Redis配置
	// 初始化Redis
	if err := configs.ConnectRedis(); err != nil {
		log.Fatalf("Failed to connect to Redis: %v", err)
	}

	// 程序退出时关闭Redis连接
	defer func() {
		if configs.RedisClient != nil {
			configs.RedisClient.Close()
		}
	}()

	// 初始化MySQL配置
	configs.ConnectMysql()

	// 初始化OSS配置
	// configs.ConnectOSS()

	r.POST("/api/v1/login", controllers.Login)
	r.POST("/api/v1/register", controllers.Register)
	r.POST("/api/v1/refresh", controllers.Refresh)

	v1 := r.Group("/api/v1")
	// v1.Use(middlewares.JWTAuthMiddleware())
	{
		// files := v1.Group("/files")
		// {
		//     files.GET("", controllers.GetAllFiles)
		//     files.POST("", controllers.UploadFile)
		//     files.GET("/:id", controllers.GetFileByID)
		//     files.DELETE("/:id", controllers.DeleteFile)
		// }

		teams := v1.Group("/teams")
		{
			teams.GET("", controllers.GetAllTeams)
			teams.GET("/:id", controllers.GetTeamByID)
		}

		books := v1.Group("/books")
		{
			books.GET("", controllers.GetAllBooks)
			books.GET("/search", controllers.SearchBooks)
			books.GET("/:id", controllers.GetBookByID)
			books.POST("", controllers.CreateBook)
			books.PUT("/:id", controllers.UpdateBook)
			books.DELETE("/:id", controllers.DeleteBook)
		}

		pets := v1.Group("/pets")
		{
			pets.GET("", controllers.GetAllPets)
		}

		albums := v1.Group("/albums")
		{
			albums.GET("", controllers.GetAllAlbums)
			albums.GET("/search", controllers.SearchAlbums)
			albums.GET("/:id", controllers.GetAlbumByID)
			albums.POST("", controllers.CreateAlbum)
			albums.PUT("/:id", controllers.UpdateAlbum)
			albums.DELETE("/:id", controllers.DeleteAlbum)
			albums.GET("/:id/songs", controllers.GetSongsByAlbumID) // 获取专辑下的所有歌曲
		}

		songs := v1.Group("/songs")
		{
			songs.GET("", controllers.GetAllSongs)
			songs.GET("/:id", controllers.GetSongByID)
			songs.POST("", controllers.CreateSong)
			songs.PUT("/:id", controllers.UpdateSong)
			songs.DELETE("/:id", controllers.DeleteSong)
		}

		comments := v1.Group("/comments")
		{
			comments.POST("", controllers.CreateComment)
			comments.PUT("/:id", controllers.UpdateComment)
			comments.DELETE("/:id", controllers.DeleteComment)
			v1.GET("/photos/:id/comments", controllers.GetCommentsByPhotoID) // 这个路由比较特殊，保持原样
		}
	}

	r.NoRoute(func(c *gin.Context) {
		utils.ErrorResponse(
			c,
			http.StatusNotFound,
			utils.NotFound,
			gin.H{"path": c.Request.URL.Path},
		)
	})

	// _ = r.Run()
	r.Run()
}
